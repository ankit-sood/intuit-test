Aspects to Consider:
    - Security 
    - Scalibility
    - Testability
    - Resilience
    - Performance 
    - Sustaininbility  
    - Maintainibility
    - CI/CD
    - Database to be used
    - DR Strategy
    - Identifies product stability
    - Automation
    - Progressive Rollouts and FMEA
    - Cost optimization

Samples of Software:
    - https://quickbooks.intuit.com/time-tracking/#
    - https://quickbooks.intuit.com/get-started/?variant=1b  


Assumptions:
    - Goals can be created in any order and will not be dependent on each other.
    - Budgets can only be created for a specific goal meaning there is a parent child relationship between Goals and Budgets.
    - We have a pre-configured distributed logging system like Splunk, Open Observe, ELK etc.
    - We have a pre-configured observability system like prometheus.
    - A common trace-id is generated when the user is successfully authenticated. This trace-id is used accross microservices to track the request. A span id is generated to track the trace with in a certain boundry.
    - All the services will be having a load balancer in front.
    - All the communincations will be done with the help of service mesh.
    - All the resiliency patterns like circuit breaker, rate limiter, bulk head etc will be handled.
    - Chaos enginering can be introduced at a later point of time.

************************
    - Figure out if we should use a single db having organization as an attribute
        or if we can have a separate instance for each organization
************************


Functional Requirements:
    - Admin should be able to register the users on demand and on bulk.
    - User should be able to login to system.
    - User should be able to reset the password.
    - Admin should be able to unlock the passoword.
    - User should be able to setup the goals in an UI Portal.
    - ***User should be able to view the goals created by his hierarchy on an UI Portal.
    - User should be able to setup one or more budgets. 
    - User should associate a budget with only one goal.
    - User should be able to import budgets from Google Spreadsheets, Excel or from JSON files.
    - User should be able to setup the forecasts in an UI Portal.
    - User should be able to share the budgets/forecasts with Accountant.
    - Role based access should be present to provide edit/read access to the user.
    - User should be able to set the reminder.
    - User should be able to send the manual notifications.
    - Notifications and reminders should be sent to user, accountant and supervisor as the budget & forecast model moves.

Services Required:
    - Auth Services
    - Goals Service
    - Budget Service
    - Notification Service
    - OCR Service (Gateway which will house the logic to make calls to LLM Gateways)
    - Reminder Service

Common Jars/Codebases:
    - Exception Handlers
    - Common Filters

Resiliance and Observability:
    - Prometheus Integration.
    - Graceful shutdowns.
    - Properly Configuring Liveness and Readiness probes.
    - Resiliancy patterns like Bulkhead, Circuit breaker, Rate Limiters.
    - Configuring retries.
    - Enable caching.
    - Have client timeout higher than the server timeouts.

Things to prepare:
    - HLD
    - LLD
    - APIs
    - PseudoCode

There are following type of actors in the system:
    - Creator       (Will be able to read, create, update and approve the goals and budgets)
    - Approver      (Will be able to read, create, update and approve the goals and budgets)
    - Admin         (Will have all the above accesses and the access to create the userA but will not have backend access)
    - Super Admin   (Will have all the accesses and can create anything from the backend).



All this is done for a single organisation:
Pre-requisite:
    - Super-Admin creates admin.
    - Admin creates the Creators and Approvers.
    
Goals Creation flow:
    Creator Perspective:
        - Creator logs in with his id.
        - Creator creates the Goals.
        - Notification is sent to the Approvers.
        - Reminder service will check the main table and send the notifcation for approvals which are pending for long time.
    
    Approver Perspective:
        - Approver recives the email to approve the goal.
        - Appover logs in with his id.
        - Approver sees multiple goals pending for his approval.
        - Approver can select multiple goals or a single goal to approve.
        - Approver can click on the goal to see all the details related to goal and he can edit the details associated to it.
        - Approver approvers the goal.
        - Notification is sent to the creator for approval.

